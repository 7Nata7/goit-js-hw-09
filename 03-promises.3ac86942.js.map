{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGcC,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBAC1BD,SAASC,cAAc,mBACpBD,SAASC,cAAc,UAGpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA4BEJ,SAASC,cAAc,SAC/BU,iBAAiB,UAzBAC,IACpBA,EAAEC,iBACGD,EAAEE,OAAOC,QAEd,MACEC,UAAYZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,IACvBP,EAAEQ,cAEV,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAOG,MAAOD,IACjCnB,EAAcmB,EAAGJ,EAAMK,OACtBC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBvB,QAAiBC,MAAU,IAEzEuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAA1B,GAAS2B,OAAOG,QAAQ,sBAAoBzB,QAAiBC,MAAU,IAEzEa,EAAMK,MAAQO,SAASZ,EAAMK,OAASO,SAASX,EAAKI,OAEtDV,EAAEQ,cAAcU,QAChBb,EAAMK,MAAQ,GACdJ,EAAKI,MAAQ,GACbH,EAAOG,MAAQ,EAAE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  stepDelay: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('button'),\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay)\n    })\n  }\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (!e.target.tagName === 'BUTTON') return;\n\n    const {\n      elements: { delay, step, amount },\n    } = e.currentTarget\n\nfor (let i = 1; i <= amount.value; i++) {\n  createPromise(i, delay.value)\n  .then(({ position, delay}) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  })\n  delay.value = parseInt(delay.value) + parseInt(step.value)\n}\ne.currentTarget.reset();\ndelay.value = '';\nstep.value = '';\namount.value = '';\n}\n\nconst formEl = document.querySelector('.form')\nformEl.addEventListener('submit', submitHandler);\n\n\n\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   firstDelay: document.querySelector('[name=\"delay\"]'),\n//   stepDelay: document.querySelector('[name=\"step\"]'),\n//   amount: document.querySelector('[name=\"amount\"]'),\n//   submitBtn: document.querySelector('button'),\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay })\n//       } else {\n//         reject({ position, delay })\n//       }\n//     }, delay)\n//     })\n//   }\n\n//   const submitHandler = e => {\n//     e.preventDefault();\n//     if (!e.target.tagName === 'BUTTON') return;\n\n//     const {\n//       elements: { delay, step, amount },\n//     } = e.currentTarget\n\n// for (let i = 1; i <= amount; i++) {\n//   createPromise(i, firstDelay)\n//   .then(({ position, delay}) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   })\n//   firstDelay += stepDelay\n// }\n// e.currentTarget.reset();\n//   }\n\n//   const formEl = document.querySelector('.form')\n//   formEl.addEventListener('submit', submitHandler);"],"names":["$7Y9D8","parcelRequire","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","target","tagName","elements","delay1","step","amount","currentTarget","i","value","then","$parcel$interopDefault","Notify","success","catch","failure","parseInt","reset"],"version":3,"file":"03-promises.3ac86942.js.map"}